// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name croboxSDK
import Alamofire
import Foundation
import Swift
import SwiftyJSON
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import croboxSDK
public struct RequestQueryParams {
  public var containerId: Swift.String
  public var viewCounter: Swift.Int
  public var viewId: Swift.String
  public var visitorId: Swift.String
  public var currencyCode: Swift.String?
  public var localeCode: croboxSDK.LocaleCode?
  public var userId: Swift.String?
  public var timestamp: Swift.String?
  public var timezone: Swift.Int?
  public var pageType: croboxSDK.PageType?
  public var customProperties: [Swift.String : Swift.String]?
  public var pageUrl: Swift.String?
  public var referrerUrl: Swift.String?
  public init(containerId: Swift.String, viewCounter: Swift.Int, viewId: Swift.String, visitorId: Swift.String, currencyCode: Swift.String? = nil, localeCode: croboxSDK.LocaleCode? = nil, userId: Swift.String? = nil, timestamp: Swift.String? = nil, timezone: Swift.Int? = nil, pageType: croboxSDK.PageType? = nil, customProperties: [Swift.String : Swift.String]? = nil, pageUrl: Swift.String? = nil, referrerUrl: Swift.String? = nil)
}
public enum PageType : Swift.Int {
  case PageOther
  case PageIndex
  case PageOverview
  case PageDetail
  case PageCart
  case PageCheckout
  case PageComplete
  case PageSearch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EventType : Swift.String {
  case Click
  case AddCart
  case RemoveCart
  case PageView
  case Error
  case CustomEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ErrorQueryParams {
  public var tag: Swift.String?
  public var name: Swift.String?
  public var message: Swift.String?
  public var file: Swift.String?
  public var line: Swift.Int?
  public var devicePixelRatio: Swift.Double?
  public var deviceLanguage: Swift.String?
  public var viewPortSize: Swift.String?
  public var screenResolutionSize: Swift.String?
}
public struct ClickQueryParams {
  public var productId: Swift.String?
  public var category: Swift.String?
  public var price: Swift.Double?
  public var quantity: Swift.Int?
  public init(productId: Swift.String? = nil, category: Swift.String? = nil, price: Swift.Double? = nil, quantity: Swift.Int? = nil)
}
public struct AddCartQueryParams {
  public var productId: Swift.String?
  public var category: Swift.String?
  public var price: Swift.Double?
  public var quantity: Swift.Int?
  public init(productId: Swift.String? = nil, category: Swift.String? = nil, price: Swift.Double? = nil, quantity: Swift.Int? = nil)
}
public struct RemoveFromCartQueryParams {
  public var productId: Swift.String?
  public var category: Swift.String?
  public var price: Swift.Double?
  public var quantity: Swift.Int?
  public init(productId: Swift.String? = nil, category: Swift.String? = nil, price: Swift.Double? = nil, quantity: Swift.Int? = nil)
}
public struct CustomQueryParams {
  public init(name: Swift.String? = nil, promotionId: Foundation.UUID? = nil, productId: Swift.Double? = nil, category: Swift.Int? = nil, price: Swift.Double? = nil, quantity: Swift.Int? = nil)
}
@objc @_hasMissingDesignatedInitializers public class PromotionResponse : ObjectiveC.NSObject {
  @objc deinit
}
public enum LocaleCode : Swift.String {
  case af_ZA
  case sq_AL
  case am_ET
  case ar_DZ
  case ar_BH
  case ar_EG
  case ar_IQ
  case ar_JO
  case ar_KW
  case ar_LB
  case ar_LY
  case ar_MA
  case ar_OM
  case ar_QA
  case ar_SA
  case ar_SY
  case ar_TN
  case ar_AE
  case ar_YE
  case hy_AM
  case as_IN
  case az_AZ
  case eu_ES
  case be_BY
  case bn_BD
  case bn_IN
  case bs_BA
  case bg_BG
  case my_MM
  case ca_ES
  case zh_CN
  case zh_HK
  case zh_TW
  case hr_HR
  case cs_CZ
  case da_DK
  case nl_BE
  case nl_NL
  case en_AU
  case en_CA
  case en_IN
  case en_IE
  case en_MT
  case en_NZ
  case en_PH
  case en_SG
  case en_ZA
  case en_GB
  case en_US
  case et_EE
  case fi_FI
  case fr_BE
  case fr_CA
  case fr_FR
  case fr_LU
  case fr_CH
  case ka_GE
  case de_AT
  case de_DE
  case de_LU
  case de_CH
  case el_GR
  case gu_IN
  case he_IL
  case hi_IN
  case hu_HU
  case is_IS
  case id_ID
  case it_IT
  case it_CH
  case ja_JP
  case kn_IN
  case kk_KZ
  case km_KH
  case ko_KR
  case ky_KG
  case lo_LA
  case lv_LV
  case lt_LT
  case mk_MK
  case ms_MY
  case ml_IN
  case mr_IN
  case mn_MN
  case ne_NP
  case no_NO
  case or_IN
  case fa_IR
  case pl_PL
  case pt_BR
  case pt_PT
  case pa_IN
  case ro_RO
  case ru_RU
  case sr_RS
  case si_LK
  case sk_SK
  case sl_SI
  case es_AR
  case es_BO
  case es_CL
  case es_CO
  case es_CR
  case es_DO
  case es_EC
  case es_SV
  case es_GT
  case es_HN
  case es_MX
  case es_NI
  case es_PA
  case es_PY
  case es_PE
  case es_PR
  case es_ES
  case es_UY
  case es_VE
  case sw_KE
  case sv_SE
  case ta_IN
  case te_IN
  case th_TH
  case tr_TR
  case uk_UA
  case ur_PK
  case uz_UZ
  case vi_VN
  case cy_GB
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ItemModel {
  public let id: Swift.String?
  public let qty: Swift.Int?
  public init(productId: Swift.String? = nil, quantity: Swift.Int? = nil)
}
@_hasMissingDesignatedInitializers public class Crobox {
  public static let shared: croboxSDK.Crobox
  public var isDebug: Swift.Bool
  public func pageView(eventType: croboxSDK.EventType!, queryParams: croboxSDK.RequestQueryParams, additionalParams: Any?, closure: @escaping (_ isSuccess: Swift.Bool, _ promotionResponse: croboxSDK.PromotionResponse?) -> Swift.Void)
  @objc deinit
}
extension croboxSDK.PageType : Swift.Equatable {}
extension croboxSDK.PageType : Swift.Hashable {}
extension croboxSDK.PageType : Swift.RawRepresentable {}
extension croboxSDK.EventType : Swift.Equatable {}
extension croboxSDK.EventType : Swift.Hashable {}
extension croboxSDK.EventType : Swift.RawRepresentable {}
extension croboxSDK.LocaleCode : Swift.Equatable {}
extension croboxSDK.LocaleCode : Swift.Hashable {}
extension croboxSDK.LocaleCode : Swift.RawRepresentable {}
